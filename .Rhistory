classProbs = T,
#summaryFunction = twoClassSummary
)
library(doMC)
registerDoMC(cores = 5)
?sample
training <- training[sample(1:nrow(training), size = 1000), ]
fit.gbm <- train(classe ~ .,
data = training,
method = "gbm",
tuneLength = 15,
trControl = ctrl,
metric = "Accuracy",
preProc = c("center", "scale")
)
fit.gbm
summary(git.gbm)
summary(fit.gbm)
save(fit.gbm, file = "./mods/fit_gbm")
set.seed(seed)
fit.xgb <- train(classe ~ .,
data = training,
method = "xgboos",
tuneLength = 15,
trControl = ctrl,
metric = "Accuracy",
preProc = c("center", "scale")
)
fit.xgb <- train(classe ~ .,
data = training,
method = "xgboost",
tuneLength = 15,
trControl = ctrl,
metric = "Accuracy",
preProc = c("center", "scale")
)
fit.nnet <- train(classe ~ .,
data = training,
method = "nnet",
tuneLength = 15,
trControl = ctrl,
metric = "Accuracy",
preProc = c("center", "scale")
)
save(fit.nnet, file = "./mods/fit_nnet")
fit.nnet
summary(fit.nnet)
plot(fit.nnet)
mods <- ls(list = "./mods/fit")
mods <- ls(list = "./mods/fit*")
list.files(path = "./mods/")
list.files(path = "./mods/", pattern = "fit")
mods <- list.files(path = "./mods/", pattern = "fit")
mods <- list.files(path = "./mods/", pattern = "fit")
sapply(mods, load)
?list.files
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
sapply(mods, load)
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
mods
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
mods
list.files(path = "./mods")
list.files(path = "./mods", patttern = "fit")
list.files(path = "./mods", pattern = "fit")
list.files(path = "./mods", pattern = "fit", full.names = T)
mods <- list.files(path = "./mods", pattern = "fit", full.names = T)
sapply(mods, load)
lapply(mods, load)
lapply(mods, load, .GlobalEnv)
resamps <- resamples(list(gbm = fit.gbm,
lda = fit.knn,
knn = fit.lb,
lb  = fit.lda,
nnet = fit.nnet,
rf = fit.rf,
svm = fit.svm
)
)
summary(resamps)
dotplot(resamps)
summary(resamps)
dotplot(resamps)
file <- "./plots/model_accuracy_kappa_results.pdf"
dev.copy2pdf(file = file, width = 6, height = 4)
if(!file.exists("./mods/fit_gbm"){
set.seed(seed)
training <- training[sample(1:nrow(training), size = 1000), ]
fit.gbm <- train(classe ~ .,
data = training,
method = "gbm",
tuneLength = 15,
trControl = ctrl,
metric = "Accuracy",
preProc = c("center", "scale")
)
save(fit.gbm, file = "./mods/fit_gbm")
}
if(!file.exists("./mods/fit_gbm")){
set.seed(seed)
training <- training[sample(1:nrow(training), size = 1000), ]
fit.gbm <- train(classe ~ .,
data = training,
method = "gbm",
tuneLength = 15,
trControl = ctrl,
metric = "Accuracy",
preProc = c("center", "scale")
)
save(fit.gbm, file = "./mods/fit_gbm")
}
?rf
?randomForest
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
plot(fit.gbm)
file <- "./plots/rf_accuracy_no_boosting_iterations.pdf"
dev.copy2pdf(file = file, width = 6, height = 4)
summary(fit.rf)
importance(fit.rf)
set.seed(4543)
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000,
keep.forest=FALSE, importance=TRUE)
importance(mtcars.rf)
importance(mtcars.rf, type=1)
set.seed(1)
data(iris)
iris.rf <- randomForest(Species ~ ., iris, proximity=TRUE,
keep.forest=FALSE)
MDSplot(iris.rf, iris$Species)
MDSplot(iris.rf, iris$Species, palette=rep(1, 3), pch=as.numeric(iris$Species))
data(iris)
set.seed(543)
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
plot(margin(iris.rf))
plot(randomForest(mpg ~ ., mtcars, keep.forest=FALSE, ntree=100), log="y")
names(fit.rf)
set.seed(4543)
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000,
keep.forest=FALSE, importance=TRUE)
names(mtcars.rf)
importance(mtcars.rf)
names(fit.rf)
fit.rf$modelInfo$varImp()
fit.rf$modelInfo$varImp
importance <- varImp(fit.rf, scale=FALSE)
plot(importance)
importance$importance
df <- importance$importance
str(df)
df[1:20,]
plot(df)
dotplot(df)
plot(importance)
plot(importance[1:10])
plot(importance[[1:10])
plot(importance[[1:10]])
head(df)
dotplot(df[1:20], labels = row.names(df))
df <- importance
names(importance)
df <- importance$importance
df <- df[1:20, ]
df <- importance$importance
View(df)
importance <- varImp(fit.rf, scale=FALSE)
dotplot(df, labels = row.names(df))
plot(importance)
?varImp
dotplot(df, labels = row.names(df))
plot(importance)
?dotplot
?dotPlot
data(iris)
TrainData <- iris[,1:4]
TrainClasses <- iris[,5]
knnFit <- train(TrainData, TrainClasses, "knn")
knnImp <- varImp(knnFit)
dotPlot(knnImp)
rfImp <- varImp(fit.rf, scale=FALSE)
dotPlot(rfImp)
dotPlot(rfImp, main = "Rob")
dotPlot(rfImp, main = "Top 20 Variables Ranked by Relative Influence"))
dotPlot(rfImp, main = "Top 20 Variables Ranked by Relative Influence")
file <- "./plots/rf_top_20_variables.pdf"
dev.copy2pdf(file = file, width = 6, height = 4)
testing <- read.csv("./data/testing.csv", header = T, stringsAsFactors = F)
rfClasses <- predict(fit.rf, newdata = testing)
rfProbs <- predict(fit.rf, newdata = testing, type = "prob")
confusionMatrix(data = rfClasses, testing$classe)
plot(resamps)
plot(fit.rf)
plot(fit.rf, main = "Random Forest Model")
file <- "./plots/rf_accuracy_no_boosting_iterations.pdf"
dev.copy2pdf(file = file, width = 6, height = 4)
a <- confusionMatrix(data = rfClasses, testing$classe)
names(a)
a$overall
a$table
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
lapply(mods, load, .GlobalEnv)
resamples()
?resamples
models <- resamples(list(gbm = fit.gbm, knn = fit.knn))# correlation between results
models
plot(models)
?caretList
library(caretEnsemble)
?caretList
resamps <- resamples(list(gbm = fit.gbm,
lda = fit.knn,
knn = fit.lb,
lb  = fit.lda,
nnet = fit.nnet,
rf = fit.rf,
svm = fit.svm
)
)
summary(resamps)
dotplot(resamps)
summary(models)
dotplot(resamps)
modelCor(resamps)
modelCor(resamps)
splom(results)
splom(results)
library(mlbench)
library(caret)
library(caretEnsemble)
splom(results)
splom(resamps)
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
lapply(mods, load, .GlobalEnv)
models <- list(gbm = fit.gbm,
lda = fit.knn,
knn = fit.lb,
lb  = fit.lda,
nnet = fit.nnet,
rf = fit.rf,
svm = fit.svm
)
resamps <- resamples(models)
modelCor(resamps)
splom(resamps)
stackControl <- trainControl(method="repeatedcv",
number=10,
repeats=3,
savePredictions=TRUE,
classProbs=TRUE
)
set.seed(seed)
stackControl <- trainControl(method="repeatedcv",
number=10,
repeats=3,
savePredictions=TRUE,
classProbs=TRUE
seed <- 7                             )
seed <- 7
set.seed(seed)
stack.glm <- caretStack(models, method="glm", metric="Accuracy", trControl=stackControl)
library(pROC)
?roc
testing <- read.csv("./data/testing.csv", header = T, stringsAsFactors = F)
load("./mods/fit_rf")
rfClasses <- predict(fit.rf, newdata = testing)
rfProbs <- predict(fit.rf, newdata = testing, type = "prob")
confusionMatrix(data = rfClasses, testing$classe)
auc <- roc(testing$classe, rfClasses)
rfClasses
auc <- roc(testing$classe, rfClasses)
auc <- roc(testing, rfClasses)
source(".R/01_main.R")
source("./R/02_load_clean_data.R")
source("./R/02_load_clean_data.R")
source("./R/02_load_clean_data.R")
url01 <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
destfile01 <- "./data/pml_testing.csv"
if(!file.exists(destfile)) download.file(url = url, destfile = destfile,
method = "curl"
)
url01 <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
source('~/Dropbox/R-Projects/coursera/courses/08_PracticalMachineLearning/class_project/R/02_load_clean_data.R')
source("./R/03_partition_create_models.R")
source("./R/04_load_models")
source("./R/04_load_models.R")
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
lapply(mods, load, .GlobalEnv)
resamps <- resamples(list(gbm = fit.gbm,
lda = fit.knn,
knn = fit.lb,
lb  = fit.lda,
nnet = fit.nnet,
rf = fit.rf,
svm = fit.svm
)
)
summary(resamps)
summary(resamps)
dotplot(resamps)
file <- "./plots/model_accuracy_kappa_results.pdf"
dev.copy2pdf(file = file, width = 6, height = 4)
plot(fit.rf, main = "Random Forest Model")
file <- "./plots/rf_accuracy_no_boosting_iterations.pdf"
dev.copy2pdf(file = file, width = 6, height = 4)
summary(fit.rf)
names(fit.rf)
fit.rf$results
fit.rf
rfImp <- varImp(fit.rf, scale=FALSE)
dotPlot(rfImp, main = "Top 20 Variables Ranked by Relative Influence")
file <- "./plots/rf_top_20_variables.pdf"
dev.copy2pdf(file = file, width = 6, height = 4)
dotPlot(rfImp, main = "Top 20 Variables Ranked by Relative Importance")
file <- "./plots/rf_top_20_variables.pdf"
dev.copy2pdf(file = file, width = 6, height = 4)
testing <- read.csv("./data/testing.csv", header = T, stringsAsFactors = F)
load("./mods/fit_rf")
rfClasses <- predict(fit.rf, newdata = testing)
rfProbs <- predict(fit.rf, newdata = testing, type = "prob")
confusionMatrix(data = rfClasses, testing$classe)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
lapply(mods, load, .GlobalEnv)
#Model with best accuracy is rf
resamps <- resamples(list(gbm = fit.gbm,
lda = fit.knn,
knn = fit.lb,
lb  = fit.lda,
nnet = fit.nnet,
rf = fit.rf,
svm = fit.svm
)
)
getwd()
library(caret)
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
library(caret)
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
lapply(mods, load, .GlobalEnv)
#Model with best accuracy is rf
resamps <- resamples(list(gbm = fit.gbm,
lda = fit.knn,
knn = fit.lb,
lb  = fit.lda,
nnet = fit.nnet,
rf = fit.rf,
svm = fit.svm
)
)
setwd("~/Dropbox/R-Projects/coursera/courses/08_PracticalMachineLearning/class_project")
list.files()
list.files(path = "./mods/")
list.files(path = "./mods")
list.files()
list.files("./mods/")
list.files(path = "./mods/")
list.files()
getwd()
load("./mods/fit_gbm")
knitr::opts_chunk$set(echo = TRUE)
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
lapply(mods, load, .GlobalEnv)
resamps <- resamples(list(gbm = fit.gbm,
lda = fit.knn,
knn = fit.lb,
lb  = fit.lda,
nnet = fit.nnet,
rf = fit.rf,
svm = fit.svm
)
)
dotplot(resamps)
lapply(mods, load, .GlobalEnv)
summary(resamps)
#download testing set
url01 <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
destfile01 <- "./data/pml_testing.csv"
if(!file.exists(destfile01)) download.file(url = url, destfile = destfile,
method = "curl"
)
#download training set
url02 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
destfile02 <- "./data/pml-training.csv"
if(!file.exists(destfile02)) download.file(url = url, destfile = destfile,
method = "curl")
#read & combine
training <-read.csv(file = destfile02, header = T, stringsAsFactors = F)
training$problem_id <- 1:nrow(training)
testing <- read.csv(file = destfile01, header = T, stringsAsFactors = F)
testing$classe <- "unk"
#bb stands for "barbell"
bb <- rbind(training, testing)
seed <- 107
nrow(bb)
cols.na <- apply(bb, 2, function(x)(sum(is.na(x))))
bb <- bb[, which(cols.na == 0) ]
rows.na <- apply(bb, 1, function(x)(sum(is.na(x))))
bb <- bb[which(rows.na == 0), ]
cols.id <- 1:7
bb <- bb[, -cols.id]
load("./mods/fit_rf")
plot(fit.rf, main = "Random Forest Model")
names(fit.rf)
fit.rf(results)
fit.rf$results
a <- fit.rf$results
a[a$mtry == 9, ]
load("./mods/fit_rf")
a <- fit.rf$results
a[a$mtry == 9, ]
load("./mods/fit_rf")
rfImp <- varImp(fit.rf, scale=FALSE)
dotPlot(rfImp, main = "Top 20 Variables Ranked by Relative Importance")
testing <- read.csv("./data/testing.csv", header = T, stringsAsFactors = F)
load("./mods/fit_rf")
rfClasses <- predict(fit.rf, newdata = testing)
rfProbs <- predict(fit.rf, newdata = testing, type = "prob")
confusionMatrix(data = rfClasses, testing$classe)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
library(ggplot2)
library(lattice)
library(doMC)
#download testing set
url01 <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
destfile01 <- "./data/pml_testing.csv"
if(!file.exists(destfile01)) download.file(url = url, destfile = destfile,
method = "curl"
)
#download training set
url02 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
destfile02 <- "./data/pml-training.csv"
if(!file.exists(destfile02)) download.file(url = url, destfile = destfile,
method = "curl")
#read & combine
training <-read.csv(file = destfile02, header = T, stringsAsFactors = F)
training$problem_id <- 1:nrow(training)
testing <- read.csv(file = destfile01, header = T, stringsAsFactors = F)
testing$classe <- "unk"
#bb stands for "barbell"
bb <- rbind(training, testing)
seed <- 107
cols.na <- apply(bb, 2, function(x)(sum(is.na(x))))
bb <- bb[, which(cols.na == 0) ]
rows.na <- apply(bb, 1, function(x)(sum(is.na(x))))
bb <- bb[which(rows.na == 0), ]
cols.id <- 1:7
bb <- bb[, -cols.id]
library(caret)
mods <- list.files(path = "./mods/", pattern = "fit", full.names = T)
lapply(mods, load, .GlobalEnv)
library(caret)
#Model with best accuracy is rf
resamps <- resamples(list(gbm = fit.gbm,
lda = fit.knn,
knn = fit.lb,
lb  = fit.lda,
nnet = fit.nnet,
rf = fit.rf,
svm = fit.svm
)
)
dotplot(resamps)
load("./mods/fit_rf")
plot(fit.rf, main = "Random Forest Model")
load("./mods/fit_rf")
a <- fit.rf$results
a[a$mtry == 9, ]
load("./mods/fit_rf")
rfImp <- varImp(fit.rf, scale=FALSE)
dotPlot(rfImp, main = "Top 20 Variables Ranked by Relative Importance")
testing <- read.csv("./data/testing.csv", header = T, stringsAsFactors = F)
load("./mods/fit_rf")
rfClasses <- predict(fit.rf, newdata = testing)
rfProbs <- predict(fit.rf, newdata = testing, type = "prob")
confusionMatrix(data = rfClasses, testing$classe)
?trainControl
testing <- read.csv("./data/testing.csv", header = T, stringsAsFactors = F)
load("./mods/fit_rf")
testing <- read.csv("./data/pml_testing_clean.csv", header = T, stringsAsFactors = F)
rfClasses <- predict(fit.rf, newdata = testing)
rfClasses
rfProbs <- predict(fit.rf, newdata = testing, type = "prob")
rfProbs
confusionMatrix(data = rfClasses, testing$classe)
rowSums(rfProbs)
?predict
rfProbs <- predict(fit.rf, newdata = testing)
rfProbs
rfClasses
testing <- read.csv("./data/testing.csv", header = T, stringsAsFactors = F)
load("./mods/fit_rf")
rfClasses <- predict(fit.rf, newdata = testing)
rfProbs <- predict(fit.rf, newdata = testing)
confusionMatrix(data = rfClasses, testing$classe)
rfClasses
testing <- read.csv("./data/pml_testing_clean.csv", header = T, stringsAsFactors = F)
load("./mods/fit_rf")
rfClasses <- predict(fit.rf, newdata = testing)
rfClasses
testing <- read.csv("./data/pml_testing_clean.csv", header = T, stringsAsFactors = F)
load("./mods/fit_rf")
rfClasses <- predict(fit.rf, newdata = testing)
rfClasses
testing <- read.csv("./data/testing.csv", header = T, stringsAsFactors = F)
confusionMatrix(data = rfClasses, testing$classe)
